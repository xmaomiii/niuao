import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.tx.RawTransactionManager;
import org.web3j.crypto.Credentials;
import org.web3j.utils.Convert;
import org.web3j.tx.Transfer;
import org.web3j.protocol.core.methods.response.TransactionReceipt;

import java.math.BigDecimal;

public class ArbitrumTransfer {
    public static void main(String[] args) throws Exception {
        // Arbitrum 节点的 RPC URL
        String rpcUrl = "https://arb1.arbitrum.io/rpc"; // 替换为实际的 Arbitrum RPC 端点

        // 发送者私钥
        String senderPrivateKey = "YOUR_PRIVATE_KEY"; // 替换为您的私钥

        // 接收者地址
        String recipientAddress = "0xRECIPIENT_ADDRESS"; // 替换为接收者的以太坊地址

        // 转账金额 (ETH)
        BigDecimal transferAmount = new BigDecimal("0.1"); // 替换为所需的转账金额

        // 创建 Web3j 实例
        Web3j web3j = Web3j.build(new HttpService(rpcUrl));

        // 创建凭证（发送者的凭证）
        Credentials credentials = Credentials.create(senderPrivateKey);

        // 创建 RawTransactionManager
        RawTransactionManager transactionManager = new RawTransactionManager(web3j, credentials);

        // 执行转账操作
        TransactionReceipt receipt = Transfer.sendFunds(
                web3j, credentials, recipientAddress, transferAmount, Convert.Unit.ETHER
        ).send();

        System.out.println("Transaction Hash: " + receipt.getTransactionHash());
        System.out.println("Block Number: " + receipt.getBlockNumber());
    }
}
